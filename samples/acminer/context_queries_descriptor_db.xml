<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ContextQueriesDescriptorDatabase>
    <Or>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (equal-package com.android.server.firewall) (regex-name-words `\bmatch(es|ed)?$`) (not (signature `&lt;com.android.server.firewall.StringFilter: boolean matchesValue(java.lang.String)&gt;`)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (contain-class AppOps) (not (regex-name-words `\bunchecked\b`)) (or (regex-name-words `^((note|start)\s(proxy\s)?op(eration)?(s)?)|((proxy\s)?op(eration)?(s)?\sallow)\b`) (regex-name-words `^check\spackage$`)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (equal-class LockPatternUtils) (regex-name-words `\b(password|pattern)\sexists\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (or (signature `&lt;com.android.server.am.ActivityManagerService: boolean processSanityChecksLocked(com.android.server.am.ProcessRecord)&gt;`) (signature `&lt;com.android.server.am.ActivityManagerService: boolean matchesProvider(android.net.Uri,android.content.pm.ProviderInfo)&gt;`) (signature `&lt;com.android.server.am.ActivityManagerService: boolean isSingleton(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,int)&gt;`) (signature `&lt;android.content.pm.PackageParser$Package: boolean isMatch(int)&gt;`) (signature `&lt;com.android.server.pm.PackageSetting: boolean isMatch(int)&gt;`) (signature `&lt;com.android.server.pm.PermissionsState$PermissionData: boolean isDefault()&gt;`) (signature `&lt;com.android.server.pm.PermissionsState$PermissionState: boolean isDefault()&gt;`) (signature `&lt;com.android.server.am.UserController: int unsafeConvertIncomingUserLocked(int)&gt;`) (signature `&lt;com.android.server.am.UserController: int getCurrentOrTargetUserIdLocked()&gt;`) (signature `&lt;com.android.server.job.controllers.JobStatus: boolean shouldDump(int)&gt;`) (signature `&lt;android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)&gt;`) (signature `&lt;com.android.server.notification.ManagedServices$ManagedServiceInfo: boolean enabledAndUserMatches(int)&gt;`) (signature `&lt;com.android.server.am.UriPermission: int getStrength(int)&gt;`) (signature `&lt;com.android.server.am.BatteryStatsService: boolean onlyCaller(int[])&gt;`) (signature `&lt;com.android.server.LocationManagerService: boolean doesUidHavePackage(int,java.lang.String)&gt;`) (signature `&lt;com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,int,java.lang.String,int)&gt;`) (signature `&lt;com.android.server.pm.UserManagerService: boolean exists(int)&gt;`) (signature `&lt;android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)&gt;`) (signature `&lt;com.android.server.notification.ManagedServices$ManagedServiceInfo: boolean supportsProfiles()&gt;`) (signature `&lt;com.android.server.accounts.AccountManagerService: boolean isAccountVisibleToCaller(java.lang.String,int,int,java.lang.String)&gt;`) (signature `&lt;com.android.server.am.ActivityManagerService$AppTaskImpl: void checkCaller()&gt;`) (signature `&lt;com.android.server.devicepolicy.DevicePolicyManagerService$Injector: boolean userManagerIsSplitSystemUser()&gt;`) (signature `&lt;android.os.UserHandle: boolean isApp(int)&gt;`) (signature `&lt;com.android.server.pm.DefaultPermissionGrantPolicy: boolean isSysComponentOrPersistentPlatformSignedPrivAppLPr(android.content.pm.PackageParser$Package)&gt;`) (signature `&lt;android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)&gt;`) (signature `&lt;android.content.pm.UserInfo: boolean isRestricted()&gt;`) (signature `&lt;com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean isRestricted()&gt;`) (signature `&lt;com.android.server.pm.UserRestrictionsUtils: boolean isValidRestriction(java.lang.String)&gt;`) (signature `&lt;com.android.server.am.ActivityManagerService: boolean isValidSingletonCall(int,int)&gt;`) (signature `&lt;com.android.server.notification.NotificationManagerService: boolean noteNotificationOp(java.lang.String,int)&gt;`) (signature `&lt;com.android.future.usb.UsbManager: boolean hasPermission(com.android.future.usb.UsbAccessory)&gt;`) (signature `&lt;android.net.NetworkCapabilities: boolean hasCapability(int)&gt;`) (signature `&lt;com.android.server.am.UserController: boolean shouldConfirmCredentials(int)&gt;`) (signature `&lt;android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()&gt;`) (signature `&lt;android.location.LocationRequest: boolean getHideFromAppOps()&gt;`) (signature `&lt;com.android.server.pm.ShortcutService: void injectEnforceCallingPermission(java.lang.String,java.lang.String)&gt;`) (signature `&lt;android.provider.Settings$System: boolean canWrite(android.content.Context)&gt;`) (signature `&lt;com.android.server.display.DisplayManagerService$BinderService: boolean canProjectSecureVideo(android.media.projection.IMediaProjection)&gt;`) (signature `&lt;com.android.server.display.DisplayManagerService$BinderService: boolean canProjectVideo(android.media.projection.IMediaProjection)&gt;`) (signature `&lt;com.android.providers.settings.SettingsProvider: boolean isGlobalOrSecureSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)&gt;`) (signature `&lt;com.android.contacts.common.util.PermissionsUtil: boolean hasAppOp(android.content.Context,java.lang.String)&gt;`) (signature `&lt;com.android.server.AppOpsService: boolean isPackageSuspendedForUser(java.lang.String,int)&gt;`) (signature `&lt;com.android.server.notification.NotificationManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)&gt;`) (signature `&lt;android.content.pm.UserInfo: boolean isAdmin()&gt;`) (signature `&lt;android.os.UserHandle: boolean isOwner()&gt;`) (signature `&lt;com.android.providers.blockednumber.BlockedNumberProvider: boolean canCurrentUserBlockUsers()&gt;`) (signature `&lt;com.android.server.wifi.WifiServiceImpl: boolean isForegroundApp(java.lang.String)&gt;`) (signature `&lt;com.android.messaging.util.OsUtil: boolean hasSmsPermission()&gt;`) (signature `&lt;com.android.server.TextServicesManagerService$TextServicesMonitor: boolean isChangingPackagesOfCurrentUser()&gt;`) (signature `&lt;com.android.server.appwidget.AppWidgetServiceImpl: void ensureGroupStateLoadedLocked(int,boolean)&gt;`) (signature `&lt;com.android.server.ConnectivityService: boolean isTetheringSupported()&gt;`) (signature `&lt;com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(java.lang.String,int,java.lang.String)&gt;`) (signature `&lt;com.android.server.print.PrintManagerService$PrintManagerImpl: int resolveCallingProfileParentLocked(int)&gt;`) (signature `&lt;com.android.server.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)&gt;`) (signature `&lt;com.android.server.locksettings.LockSettingsService: void ensureCallerSystemUid()&gt;`) (signature `&lt;com.android.server.NetworkScoreService: boolean isCallerActiveScorer(int)&gt;`)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(enforce|has|check)\s([a-z\s]+\s)?permission(s)?\b`) (not (equal-package android.test)) (not (equal-package com.android.future.usb)) (not (equal-package com.android.packageinstaller.permission.model)) (not (equal-class MockContext)) (not (equal-class MockPackageManager)) (not (and (or (equal-name hasPermission) (equal-name isPermissionsReviewRequired)) (or (starts-with-class PermissionManagerService) (equal-class PermissionManagerInternal)))) (not (regex-name-words `\b((has\ssms|scan\sresult|package\srequesting)\spermission(s)?)|and\screate\suri\sdata\b`)) (not (signature `&lt;android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])&gt;`)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^permission\s(to\sop\scode|info\sfootprint|is\sgranted)$`) (not (equal-class MockContext)) (not (equal-class MockPackageManager)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(find\spermission\stree\slp|calculate\scurrent\spermission\sfootprint\slocked)$`) (not (equal-class MockContext)) (not (equal-class MockPackageManager)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(check|enforce|verify)\s(uid\s)?signatures(\scompat)?$`) (not (equal-class MockContext)) (not (equal-class MockPackageManager)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(enforce\s([a-z\s]+\s)?package(s)?|ensure\scall(er|ing)\spackage|check\s((if\s)?package(s)?\s(startable|name|policy\saccess|match|belongs\sto\suid)|carrier\sprivileges\sfor\spackage|source\spackage\ssame))\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(calling\s)?package\sallowed\sto\s[a-z\s]+`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(check|enforce)\s([a-z\s]+\s)?system\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^((is|enforce)\s(user\sadmin|admin\suser|device\sowner\suser\sid|package\sdevice\sadmin)|(get|is)\sactive\sadmin\s(with\spolicy(\sfor\s(caller|uid|user))?|for\s(caller|uid|user)|unchecked)(\slocked)?)\b`) (not (or (equal-name isUidActive) (equal-name isUidPresent) (equal-name isUidActiveLocked) (equal-name isUidActiveSynced) (equal-name isUidInForeground) (equal-name isUidPowerSaveUserWhitelisted) (equal-name isUidPowerSaveWhitelisted) (equal-name isUidTempPowerSaveWhitelisted) (equal-name isWatchingUid))))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\s((caller\s)?(device|profile)\s)owner(\s(managed\ssingle\suser\sdevice|app(\s(on\s(any|calling)\suser(\sinner)?))?))?|has\s(device\sowner(\sor\sprofile\sowner)?|profile\sowner))$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(enforce\s(owner\srights|can\s(manage|set)\s(device|profile)\s(and\sdevice\s)?owner(s)?|same\sowner)|check\s(uri\sowner\slocked|show\sto\sowner\sonly|set\sdevice\sowner\spre\scondition)|ensure\sdevice\sowner\smanaging\ssingle\suser)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^get\scross\sprofile\s[a-z\s]+\s(disabled|enabled)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^enforce\s(can\smanage\s(ca\scerts|application\srestrictions|device\sadmin|installed\skeys)|not\s(isolated\scaller|managed\sprofile)|shell(\srestriction)?|manage(d)?\s(users|profile)|(valid\s)?u(ser(\sid)?|id)(\sunlocked)?|policy\saccess|carrier\s(or\sphone\s)?privilege|(expand\s)?status\sbar(\s(or\sshell|service))?|hardware\sproperties\sretrieval\sallowed|metered\sapn\spolicy|modify\sphone\sstate|is\sadmin|persistent\sdata\sblock\saccess|receive\sand\ssend|valid\sjob\srequest|volume\scontroller)\b`) (not (equal-class MockContext)) (not (equal-class MockPackageManager)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `\bis\s([a-z\s+]+\s)?(isolated|privileged|account\smanaged|cert\sinstaller|test\sharness|uid|security\sviolation|user\sa\smonkey|(affiliated|primary)\suser)\b`) (not (equal-class CredentialHelper)) (not (equal-class MockContext)) (not (equal-class MockPackageManager)) (not (equal-class BasePermission)) (not (equal-package android.icu.text)) (not (regex-name-words `\b(blocking\suid|uid\s(idle|enumeration|(state\s)?foreground))\b`)) (not (signature `&lt;com.android.systemui.statusbar.phone.NotificationGroupManager: boolean isIsolated(android.service.notification.StatusBarNotification)&gt;`)) (not (or (equal-name isUidActive) (equal-name isUidPresent) (equal-name isUidActiveLocked) (equal-name isUidActiveSynced) (equal-name isUidInForeground) (equal-name isUidPowerSaveUserWhitelisted) (equal-name isUidPowerSaveWhitelisted) (equal-name isUidTempPowerSaveWhitelisted) (equal-name isWatchingUid))))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^has\s((account\s)?access|granted|([a-z\s]+\s)?(restriction|privilege)(s)?|[a-z\s]+\sinstalled|granted\spolicy)$`) (not (equal-class RestrictedLockUtils)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^get\s([a-z\s]+\s)?((do\snot\sask|account)\scredentials\s(on\sboot)|privilege)\b`) (not (equal-package com.android.internal.telephony.uicc)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^get\s(app\sstart\smode|(bluetooth|camera|screen)\s([a-z\s]+\s)?(disabled|enabled)|((minimum|(caller\s)?allowed)\s)?resolution\slevel|[a-z\s]+\sfor\scalling\spackage)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^can\s(clear\sidentity|draw\soverlays|run\shere|user\smodify\saccounts|access\s(app\swidget|account)|read\sphone\s(state|number)|control\smagnification|(device|profile)\sowner\schange|caller\saccess\smock|(dispatch\saccessibility\sevent|get\saccessibility\snode\sinfo)\slocked|launch\shome\sactivity|manage\sautomatic\szen\srule|perform\sgestures|retrieve\s((interactive\s)?windows|window\scontent)\slocked|use\s(fingerprint|sip))\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^handle\sincoming\suser\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s((component|(([a-z]+\s)+)provider)\s)?enabled\sfor\s(current\s)?(profile|package|user)(s)?$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(component|lock\s(pattern|password))\senabled\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^verify\s(broadcast\slocked|sessions\srequest|service\strusted|calling\spackage|caller|signatures\slp|(incoming|calling)\suid|([a-z]+\s)*permission)\b`) (not (equal-name verifyPermissionIntegrity)) )"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^check\s(((audio|notification)\s)?op(eration)?(\sno\sthrow)?|(if\s)?caller\s(interact\sacross\susers\sfull|can\saccess\sscan\sresults|is\s(current\suser\sor\sprofile|same\sapp|provider|(self\sor\s)?foreground\suser|phone\sor\scarrier\sapp))|((embedded|device\sstats|(update\s)?app\sop(p(s)?|s)|app\sswitch)\sallowed(\s(inner|locked))?)|(allow\sbackground|restriction)\slocked|and\snote\s(write\ssettings|change\snetwork\sstate|draw\soverlays)\soperation|authority\sgrants|resolution\slevel\sis\ssufficient\sfor\s(geofence|provider)\suse|peers\smac\saddress|interact\sacross\susers\sfull|(location|policy)\saccess|access\slevel|key\sintent|read\sphone\s(number|state)|service\stoken)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(protected\s(broadcast|package)|package\s((data|state)\sprotected)|(package\s)?granted|notification\spolicy\saccess\sgranted(\sfor\spackage)?|(cross|same|compatible)\suser(\sid)?|listener\spackage)\b`) (not (equal-class MockPackageManager)) (not (equal-package android.content.pm.permission)) (not (equal-package com.android.packageinstaller.permission.model)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(get\stasks|mount|default)\s(dis)?allowed\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(current\suser\slocked|local\sunlocked\suser|allowed\sby\s(current\s)?user\ssettings\slocked)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\sactive\spassword\ssufficient$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\s(caller\s(application\srestrictions\smanaging\spackage|same\sapp)|(same|m)\sapp))\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(((updated|caller|required\sfor)\s)?system(\sonly)?(\s(app|user))?)$`) (not (equal-class KeyEvent)) (not (equal-class ActivityThread)) (not (equal-class MediaRouter$RouteCategory)) (not (equal-class TrustedCertificateStore)) (not (equal-class ZenModeFiltering)) (not (equal-package com.android.packageinstaller.permission.utils)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(op|user|access)\srestricted\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(check\s)?(caller|package)\shas\s([a-z]+\s)*(permission|access)$`) (equal-class VoicemailPermissions) (not (and (or (equal-name hasPermission) (equal-name isPermissionsReviewRequired)) (or (starts-with-class PermissionManagerService) (equal-class PermissionManagerInternal)))))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\s((accessibility\sservice|input\smethod)\s)?permitted(\s(by\sadmin|shell\sbroadcast))?|check\sread\saccounts\spermitted)$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\s((accessibility\sservice|input\smethod)\s)?permitted(\s(by\sadmin|shell\sbroadcast))?|check\sread\saccounts\spermitted)$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(keyguard|system)\ssecure$`) (not (equal-class WindowManagerPolicy)) (not (equal-class QuickActivity)) (not (equal-class BaseStatusBar)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (or (contain-class KeyguardService) (contain-class KeyguardState) (contain-class LockPattern)) (regex-name-words `^is\ssecure$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(same|current|managed)\sprofile(\s(group(\slp)?|locked))?$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(((read|write|runtime|package\srequesting|install)\s)?permission(s)?(\s(user\supdated|review\srequired|revoked\sby\spolicy|key))?)$`) (not (equal-class UriPermission)) (not (equal-class MockPackageManager)) (not (and (or (equal-name hasPermission) (equal-name isPermissionsReviewRequired)) (or (starts-with-class PermissionManagerService) (equal-class PermissionManagerInternal)))) (not (equal-class BasePermission)) (not (regex-name-words `\b((has\ssms|scan\sresult|package\srequesting)\spermission(s)?)|and\screate\suri\sdata\b`)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^ensure\s[a-z\s]+\spermission$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^validate\spackage\sname\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (not (equal-class TrustManagerService)) (regex-name-words `^resolve\s(calling\s(app|user(\sid)?)(\s(enforcing\spermissions))?|profile\sparent)(\slocked)?`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(set\s)?wallpaper\s(supported|allowed)\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\scaller\s(allowed\sto\ssilently\suninstall|shell|bind\sapp\swidget\swhite\slisted\slocked|interacting\sacross\susers))\b`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^(is\sdevice\s(locked|secure))$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\s(accessible\sto\suser|profile\s(enabled|with\slocked\sparent)|separate\sprofile\schallenge\senabled|development|black\slisted|blacklisted|retrieval\sallowing\swindow|called\sfor\scurrent\suser\slocked|cross\sprofile\squick\scontact\sdisabled|current\s(prepared\spackage|user\sor\sprofile|volume\scontroller)|enabled\s(group\sprofile|notification\slistener)|host\saccessing\sprovider|lock\sscreen\ssecure\sunchecked|parent\sor\sprofile|system\srule|user\srunning\sand\sunlocked|vpn\suser\spre\sconsented|provider([a-z\s]+\s)?white\slisted)\b`) (not (equal-class BasePermission)))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^ensure\sin\suser\sprofiles$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^supports\sswitch\sto(\sby\suser)?$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^called\sfrom\svalid\suser$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (regex-name-words `^is\sprovider\s[a-z\s]*whitel?\slisted$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (equal-class UserInfo) (regex-name-words `^is\sprimary$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (not (equal-class AccessibilityServiceInfo)) (regex-name-words `^is\s(partially\s)?direct\sboot\saware$`))"/>
        <KeepMethodIs Value="(and (or (starts-with-package android.) (starts-with-package com.android.)) (or (equal-class UserManagerService) (equal-class IUserManager) (equal-class IUserManager$Stub$Proxy)) (regex-name-words `^is\srestricted$`))"/>
    </Or>
</ContextQueriesDescriptorDatabase>
