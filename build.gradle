plugins {
  id 'com.github.johnrengelman.shadow' version '7.1.0'
  id 'java'
  id 'org.barfuin.gradle.taskinfo' version '1.3.1'
}
import org.gradle.internal.logging.*

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories { 
    mavenCentral() 
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'xmlpull' && details.requested.name == 'xmlpull' && details.requested.version == '1.1.3.4d_b4_min') {
            details.useVersion '1.1.3.1'
        }
        if (details.requested.group == 'com.google.guava' && details.requested.name == 'guava' && details.requested.version == '27.1-android') {
            details.useVersion 'guava:19.0'
        }
    }
}

dependencies {
	implementation 'com.google.guava:guava:19.0'
	implementation 'org.smali:baksmali:2.4.0'
	implementation 'org.smali:smali:2.4.0'
	implementation 'org.bouncycastle:bcprov-jdk15on:1.54'
	implementation 'com.thoughtworks.xstream:xstream:1.4.7'
	implementation 'org.slf4j:slf4j-simple:1.7.18'
	implementation 'org.jsoup:jsoup:1.11.2'
	implementation 'com.google.doclava:doclava:1.0.6'
	// This may need to be changed back to jdk-tools.jar if it does not work
	implementation 'com.github.olivergondza:maven-jdk-tools-wrapper:0.1'
	implementation 'org.antlr:antlr:3.5.2'
	implementation 'com.google.jsilver:jsilver:1.0.0'
	implementation 'org.ccil.cowan.tagsoup:tagsoup:1.2.1'
	implementation 'org.antlr:antlr-runtime:3.5.2'
	implementation 'org.json:json:20190722'
	implementation 'org.snakeyaml:snakeyaml-engine:2.1'
	implementation 'io.github.classgraph:classgraph:4.8.62'
	implementation 'org.jboss.forge.roaster:roaster-jdt:2.21.0.Final'
	implementation 'org.soot-oss:soot:4.1.0'
}

//Reproducible builds
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

//Default memory for running javaexec tasks
tasks.withType(JavaExec) {
	def mem = getMemoryNeeded()
    jvmArgs = ['-Xms8g', '-Xmx' + mem + 'g']
}

classes {
	dependsOn "copyTask"
}

jar {
	manifest {
		attributes 'Main-Class': 'org.sag.main.Main'
	}
}

shadowJar {
	mergeServiceFiles()
	mergeGroovyExtensionModules()
	archiveClassifier.set('All')
	archiveVersion.set('')
}

assemble {
	dependsOn "shadowJar"
}

task copyTask(dependsOn: processResources, type: Copy) {
	into "${buildDir}/resources/main/"
	into('dextra') {
		from "${projectDir}/tools/dextra"
		include "dextra"
		include "dextra.armv7"
		include "dextra.ELF64"
	}
	into('extfstools') {
		from "${projectDir}/tools/extfstools"
		include "bin/*"
	}
	into('vdexExtractor') {
		from "${projectDir}/tools/vdexExtractor"
		include "bin/*"
		include "paths.txt"
		include "tools/deodex/run.sh"
		include "tools/deodex/constants.sh"
	}
	into('config') {
		from "${projectDir}/config"
	}
}

def getMemoryNeeded() {
	def avl = org.sag.Helpers.getAvailableSystemMemory()
	def gavl = java.lang.Double.valueOf(java.lang.Math.floor(avl / 1073741824)).longValue() - 2
	if(gavl <= 8) {
		return 8
	}
	return gavl
}

def resolveWorkingDir(args) {
	def defaultWorkingDir = "${projectDir}/working"
	def ret = null
	if(args == null || args.size() == 0) {
		ret = defaultWorkingDir
	} else {
		def isNext = false
		for(String s : args) {
			if(s.equals("-i")) {
				isNext = true
			} else if(isNext) {
				isNext = false
				ret = s
			}
		}
		if(ret == null || ret.isEmpty()) {
			ret = defaultWorkingDir
		}
	}
	return org.sag.Helpers.getPath(ret)
}

def ensureWorkingDirIncluded(args, newArgs, path) {
	if(args != null && !args.isEmpty()) {
		def isNext = false
		for(Iterator it = args.iterator(); it.hasNext();) {
			String s = it.next()
			if(s.equals("-i")) {
				isNext = true
				it.remove()
			} else if(isNext) {
				isNext = false
				it.remove()
			}
		}
	}
	newArgs.add("-i")
	newArgs.add(path.toString())
}

def addArgs(args, newArgs, toAdd) {
	if(args != null && !args.isEmpty()) {
		def toRemove = new ArrayList<Integer>()
		def workingList = new ArrayList<Integer>()
		def size = toAdd.size()
		for(int i = 0; i < args.size(); i++) {
			if(size == workingList.size()) {
				toRemove.addAll(workingList)
				workingList = new ArrayList<Integer>()
			}
			if(args[i].equals(toAdd.get(workingList.size()))) {
				workingList.add(i)
			} else {
				workingList = new ArrayList<Integer>()
			}
		}
		if(size == workingList.size()) {
			toRemove.addAll(workingList)
		}
		if(!toRemove.isEmpty()) {
			def removed = 0;
			for(Integer i : toRemove) {
				args.remove(((int)i)-removed)
				removed++
			}
		}
	}
	newArgs.addAll(toAdd)
}

task helpDiag(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "Output the help dialog of the ${rootProject.name}-All.jar. Any other options given will be ignored except jvm arguments given in the following example format -Djvmargs='-Xms32g -Xmx32g'. Note setting the jvm arguments overrides the default jvm arguments, which are '-Xms8g -Xmx(max_free_memory - 2)g', and is not recommended."
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def newParms = new ArrayList<String>()
		newParms.add("-h")
		def jvmarguments = System.getProperty("jvmargs","")
		if(jvmarguments != null && !jvmarguments.isEmpty()) {
			jvmArgs(jvmarguments.split())
		}
		setArgs(newParms)
	}
}

task acminer(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "Run the ${rootProject.name}-All.jar with the default options for a run of the phase group ACMiner. The options may be customized by giving the jar arguments through gradle using the following example format --args='-i \"path/to/working dir\"', where everything inside the '' of --args= would be formatted exactly as if it was passed directly to the jar. You may also customize the jvm arguments using the following example format -Djvmargs='-Xms32g -Xmx32g'. Note setting the jvm arguments overrides the default jvm arguments, which are '-Xms8g -Xmx(max_free_memory - 2)g', and is not recommended."
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def parms = getArgs()
		def newParms = new ArrayList<String>()
		def workingDir = resolveWorkingDir(parms)
		
		def currentDate = new Date().format('yyyy-MM-dd_HH-mm-ss')
		def loggingDirectory = new File("${workingDir}/log/__full__")
		loggingDirectory.mkdirs();
		def out = new FileOutputStream(new File(loggingDirectory, "${currentDate}.log"))
		standardOutput = new org.apache.tools.ant.util.TeeOutputStream(out, System.out);
		errorOutput = new org.apache.tools.ant.util.TeeOutputStream(out, System.err);
		
		def jvmarguments = System.getProperty("jvmargs","")
		if(jvmarguments != null && !jvmarguments.isEmpty()) {
			jvmArgs(jvmarguments.split())
		}
		ensureWorkingDirIncluded(parms, newParms, workingDir)
		def toAdd = new ArrayList<String>()
		toAdd.add("--ACMiner")
		addArgs(parms, newParms, toAdd)
		newParms.addAll(parms)
		setArgs(newParms)
	}
}

task acminerDebugLite(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "TODO"
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def parms = getArgs()
		def newParms = new ArrayList<String>()
		def workingDir = resolveWorkingDir(parms)
		def jvmarguments = System.getProperty("jvmargs","")
		if(jvmarguments != null && !jvmarguments.isEmpty()) {
			jvmArgs(jvmarguments.split())
		}
		ensureWorkingDirIncluded(parms, newParms, workingDir)
		def toAdd = new ArrayList<String>()
		toAdd.add("-p")
		toAdd.add("ACMiner")
		toAdd.add("ACMinerDebug")
		toAdd.add("enable:true,Paths:true,CGMethod:true,CGMethodLimit:5")
		addArgs(parms, newParms, toAdd)
		newParms.addAll(parms)
		setArgs(newParms)
	}
}

task acminerDebug(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "TODO"
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def parms = getArgs()
		def newParms = new ArrayList<String>()
		def workingDir = resolveWorkingDir(parms)
		def jvmarguments = System.getProperty("jvmargs","")
		if(jvmarguments != null && !jvmarguments.isEmpty()) {
			jvmArgs(jvmarguments.split())
		}
		ensureWorkingDirIncluded(parms, newParms, workingDir)
		def toAdd = new ArrayList<String>()
		toAdd.add("--ACMinerDebugWithAllOption")
		addArgs(parms, newParms, toAdd)
		newParms.addAll(parms)
		setArgs(newParms)
	}
}

task acminerDebugAll(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "TODO"
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def parms = getArgs()
		def newParms = new ArrayList<String>()
		def workingDir = resolveWorkingDir(parms)
		def jvmarguments = System.getProperty("jvmargs","")
		if(jvmarguments != null && !jvmarguments.isEmpty()) {
			jvmArgs(jvmarguments.split())
		}
		ensureWorkingDirIncluded(parms, newParms, workingDir)
		def toAdd = new ArrayList<String>()
		toAdd.add("--ACMinerAllDebugOptions")
		addArgs(parms, newParms, toAdd)
		newParms.addAll(parms)
		setArgs(newParms)
	}
}

//-Djvmargs='-Xms32g -Xmx32g'
//gradle acminer --args='-i "bla/moo moo" -h --ACMiner'
//./gradlew acminer --args='-i "/home/sagorski/Android/input/test"'
task testss(dependsOn: shadowJar, type: JavaExec) {
	group = "Run"
	description = "Test"
	classpath = files("${buildDir}/libs/${rootProject.name}-All.jar")
	
	doFirst{
		def parms = getArgs()
		def newParms = new ArrayList<String>()
		def workingDir = resolveWorkingDir(parms)
		ensureWorkingDirIncluded(parms, newParms, workingDir)
		println parms
		println newParms
		def toAdd = new ArrayList<String>()
		toAdd.add("-p")
		toAdd.add("ACMiner")
		toAdd.add("ACMinerDebug")
		toAdd.add("enable:true,Paths:true,CGMethod:true,CGMethodLimit:5")
		addArgs(parms, newParms, toAdd)
		println parms
		println newParms
		toAdd = new ArrayList<String>()
		toAdd.add("-h")
		addArgs(parms, newParms, toAdd)
		newParms.addAll(parms)
		setArgs(newParms)
		println getArgs()
		println org.sag.Helpers.testMemory()
	}
}
